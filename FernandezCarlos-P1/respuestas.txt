1)
    a) 
        Para fitar los errores teoricos hemos utilizado la formula del error de una serie de Taylor tomando el maximo de la derivada en el
        intervalo para asi asegurarnos que la fita es correcta.

    b)
        Para calcular exp(x) unicamente si x > 0, lo que se ha hecho es utilizar el mismo algoritmo que antes para calcular exp(|x|) y en funcion de
        si x < 0 o no se invertia (1 / exp(|x|) si x < 0).
    
        El resultado es un menor error real para x < 0 que en el caso anterior.

    c)
        Metodo de calculo: (suponemos x >= 0, para x < 0 se aplica la conversion mostrada en el apartado anterior)
            - Definiremos n como la parte entera d x y d como su parte decimal.
            - Calcularemos exp(1) utilizando el polinomio de taylor de exp(x) con un error relativo menor o igual al deseado (que llamaremos prec)
              dividido por n - 1.
            - Desupes se multiplica el valor obtenido de exp(1) por si mismo n veces para obtener exp(n) (error relativo: prec * n / (n + 1))
            - Seguidamente calculamos el valor de exp(d) utilizando el plinomio de taylor de exp(x) con un error relativo de prec / (n - 1)
            - Finalmente calculamos exp(x) al multiplicar exp(n) * exp(d) (error relativo: prec)


        Este metodo es muy rapido para valores de x en [-20, 20] con una precison de hasta 1e-14 para obtener un resultado casi instantaneo.
        Para precisiones mayores con valores |x| > 10 tarda unos minutos y tiende a fallar. Por eso creo que el metodo del apartado (b) tiene unos
        resultados mejores que este, consiguiendo una mayor precision y velocidad para |x| mas grandes.
    
        Este metodo funciona peor para valores altos de |x| on un error relativo menor a 1e-15 por que la serie de taylor de exp(1) tarda mucho en
        converger y los terminos son muy peque√±os lo que hace que el ordenador asigne nan a la variable e y haga fallar al algoritmo.

2)
    b)
        Estimacion del error k = 34 y variable float:  2.01419e-21
        Estimacion del error k = 34 y variable double: 5.51372e-15
    c)
        Estimacion del error en k = 34: 4.69210e-27

        Interpretacion:
            El error en este caso es mucho menor a los dos casos anteriores. 

3)
    a) 
        El grafico de f(x) generado por gnuplot (archivo "plot1.png") contiene valores erraticos de f(x) en un entorno de x = 0. Esto se debe a 
        que la funcion no esta definida en x = 0, por tanto el dibujo no es correcto para valores cercanos a 0.

    b) 
        El algoritmo que se utilizara para calcular f(x) con un error menor a 1e-6 es el siguiente:
            - Se sustituira cos x por su Polinomio de Taylor de grado 2: 1 - x*x/2 
            - Podemos ver como el error de f(x) en este caso no es otro que |6*(cos x) - 4|/(x*x) * |(sin x) * x*x*x| / 4! 
                                                                            |--- <= 2 * 1e-6 ---|   |------ <= 1e-9 -----|
            - Para |x| <= 1e-3 el error absoluto de f(x) esta fitado por 2 * 1e-6 * 1e-9 <= 1e-6 lo que implica que este algoritmo tiene la
              precision deseada.

    c)
        La funcion f(x) no esta definida en x = 0, aunque esta puede extenderse de forma continua si fijamos f(0) = -1.
       En el apartado (a), se puede ver como el calculo directo de f(x) lleva a gnuplot a dar valores erroneos de f(x) en un entorno de x = 0 
       dado que el error en x puede llevar a x a valores muy proximos a cero para los cuales el error fruto de las operaciones se dispara.
    
       En el caso de grafico generado por los datos obtenidos al ejecutar este programa (se encuentran en "func.dad"), se puede ver como se reduce
       el radio con valores erraticos a un entorno muy cercano al cero, donde esta funcion se evalua como 0 pero unicamente por la aproximacion 
       utilizada. Pero fuera de este entorno se consigue una aproximacion fiel a f(x), mejor que la obtenida con gnuplot.